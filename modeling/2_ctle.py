"""
This file shows example of CTLE modelling, and generates the impulse response of the channel and CTLE 

Requires running 1_channel.py first
"""

#import useful packages
import serdespy as sdp
import numpy as np
import matplotlib.pyplot as plt
import skrf as rf
import scipy as sp
from si_prefix import si_format

#load in data generated by 1_channel.py
f = np.load("./data/f.npy")
h = np.load("./data/h_thru.npy")
H = np.load("./data/TF_thru.npy")

#datarate
datarate = 8e9
data_period = 1/datarate

#NRZ enconding
nyquist_f = datarate/2
symbol_t = 1/nyquist_f

#simulator step time 1ps
t_d=1e-12

#simulator bit period
samples_per_symbol = round(data_period/t_d)


#frequency vector in rad/s
w = f*(2*np.pi)

#oversampling ratio used in 1_channel.py
samples_per_symbol = 100

#set poles and zeroes for peaking at nyquist freq



#%% Custom CTLE transfer function
ctle_AdcdB = -6;
ctle_AacdB = 6;
ctle_fz0 = nyquist_f/8;
ctle_fp2 = 20e9;

ctle_Adc = 10**(ctle_AdcdB/20);
ctle_Aac = 10**(ctle_AacdB/20);
ctle_peaking = ctle_Aac/ctle_Adc;
ctle_fp1 = ctle_peaking*ctle_fz0;
ctle_gbw = ctle_Adc*2*np.pi*ctle_fp2;

ctle_wz0 = 2*np.pi*ctle_fz0;
ctle_wp1 = 2*np.pi*ctle_fp1;
ctle_wp2 = 2*np.pi*ctle_fp2;

print('Zero: '+si_format(ctle_fz0)+', P1: '+si_format(ctle_fp1)+', P2, : '+si_format(ctle_fp2))
print('AvDC: '+si_format(ctle_AdcdB)+', AvAC: '+si_format(ctle_AacdB)+', Peaking, : '+si_format(ctle_AacdB+ctle_AdcdB))

ctle_n1 = ctle_Adc*ctle_wp1*ctle_wp2;
ctle_n0 = ctle_Adc*ctle_wp1*ctle_wp2*ctle_wz0;
ctle_d2 = ctle_wz0;
ctle_d1 = (ctle_wp1 + ctle_wp2)*ctle_wz0;
ctle_d0 =  ctle_wp1*ctle_wp2*ctle_wz0;

#calculate Frequency response of CTLE at given frequencies
w, H_ctle = sp.signal.freqs([ctle_n1, ctle_n0], [ctle_d2, ctle_d1, ctle_d0], w)

#bode plot of CTLE transfer function
plt.figure(dpi=600)
plt.semilogx(1e-9*f,20*np.log10(abs(H_ctle)), color = "red", label = 'CTLE')
plt.title("CTLE Frequency Response")
plt.grid()
plt.axvline(x=nyquist_f*1e-9,color = 'grey', label = "f_N")
plt.axvline(x=ctle_fz0*1e-9,color = 'green', label = "Zero")
plt.axvline(x=ctle_fp1*1e-9,color = 'blue', label = "Pole1")
plt.axvline(x=ctle_fp2*1e-9,color = 'red', label = "Pole2")
plt.axvline(x=ctle_gbw*1e-9,color = 'black', label = "GBW")
plt.legend()


#%% SerdesPy CTLE
#set poles and zeroes for peaking at nyquist freq
#high peaking because channel is high insertion loss

# w = 2*pi*f, f = w/2*pi 

z = (500e6)*(2*np.pi)
p = (4e9)*(2*np.pi)
k = 0.5*p**2/z


#calculate Frequency response of CTLE at given frequencies
w, H_ctle = sp.signal.freqs([k/p**2, k*z/p**2], [1/p**2, 2/p, 1], w)

#bode plot of CTLE transfer function
plt.figure(dpi=600)
plt.semilogx(1e-9*f,20*np.log10(abs(H_ctle)), color = "red", label = 'CTLE')
plt.title("CTLE Frequency Response")
plt.grid()
plt.axvline(x=nyquist_f*1e-9,color = 'grey', label = "Nyquist Frequency")
plt.axvline(x=z/(2*np.pi)*1e-9,color = 'green', label = "Zero Location")
plt.axvline(x=p/(2*np.pi)*1e-9,color = 'blue', label = "Pole Location")
plt.legend()


#%% compute and save impulse response of CTLE transfer function
h_ctle, t_ctle = sdp.freq2impulse(H_ctle,f)
h_ctle = h_ctle[0:1000]
plt.figure(dpi=600)
plt.plot(h_ctle)

np.save("./data/h_ctle.npy", h_ctle)


#%% plot eye diagram with and without CTLE
voltage_levels = np.array([-1,1])

prbs_nbits = 1000


data = np.concatenate((sdp.prbs13(1),sdp.prbs13(1)))[:prbs_nbits+1] #Max 16382

TX = sdp.Transmitter(data, voltage_levels, nyquist_f)

TX.oversample(samples_per_symbol)

max_idx = np.where(h == np.amax(h))[0][0]

signal_out = 0.5*sp.signal.fftconvolve(h,TX.signal_ideal, mode = "full")[max_idx:max_idx+(prbs_nbits+1)*samples_per_symbol]

sdp.simple_eye(signal_out, samples_per_symbol*2, np.int16(prbs_nbits/2), TX.UI/TX.samples_per_symbol, "Eye Diagram")

signal_out_ctle = 0.5*sp.signal.fftconvolve(signal_out, h_ctle, mode = "full")[samples_per_symbol:(prbs_nbits+1)*samples_per_symbol]

sdp.simple_eye(signal_out_ctle, samples_per_symbol*2, np.int16(prbs_nbits/2), TX.UI/TX.samples_per_symbol, "Eye Diagram with CTLE")
